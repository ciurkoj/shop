{"version":3,"sources":["containers/MealList.js","containers/Login.js","routes.js","containers/CustomLayout.js","store/actions/auth.js","store/actions/actionsTypes.js","App.js","serviceWorker.js","store/utility.js","store/reducers/auth.js","index.js"],"names":["MealList","state","Meals","meal_name","description","price_tag","list","axios","get","then","res","setState","data","console","log","style","width","margin","minInlineSize","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","this","renderItem","item","Item","title","extra","href","React","Component","antIcon","LoadingOutlined","type","fontSize","spin","NormalLoginForm","handleSubmit","e","preventDefault","props","form","validateFields","err","values","onAuth","userName","password","errorMessage","error","message","loading","indicator","onSubmit","name","initialValues","remember","label","rules","required","Password","valuePropName","onClick","html","marginRight","to","connect","BaseRouter","exact","path","component","Login","Header","Layout","Content","CustomLayout","className","float","theme","mode","isAuthenticated","key","padding","minHeight","children","authSuccess","token","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","App","onTryAutoSignup","getItem","undefined","expirationDate","Date","getTime","Boolean","window","location","hostname","match","updateObject","oldObject","updateProperties","initialState","authStart","action","authFail","authLogout","reducer","composeEnhances","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ee87cdd3.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { List, Card } from \"antd\";\n\nclass MealList extends React.Component {\n  state = {\n    Meals: [{ meal_name: \"\", description: \"\", price_tag: \"\" }],\n    list: [\"a\"],\n  };\n\n  componentWillMount() {\n    axios.get(\"https://shop-281014.nw.r.appspot.com/api/\").then((res) => {\n      this.setState({\n        Meals: res.data,\n        list: [\"b\"],\n      });\n      console.log(res.data);\n      console.log(this.state.Meals[0].meal_name);\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"75%\", margin: \"auto\" }}>\n        <List\n          style={{ margin: \"auto\", minInlineSize: \"100%\" }}\n          grid={{\n            gutter: 16,\n            xs: 1,\n            sm: 2,\n            md: 3,\n            lg: 4,\n            xl: 5,\n            xxl: 5,\n          }}\n          dataSource={this.state.Meals}\n          renderItem={(item) => (\n            <List.Item>\n              <Card title={item.meal_name} extra={<a href=\"/\">More</a>}>\n                <p>{item.description}</p>\n                <p>{item.price_tag}</p>\n              </Card>\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MealList;\n","import { Form, Input, Button, Checkbox, Spin } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst antIcon = (\n  <LoadingOutlined type=\"loading\" style={{ fontSize: 24 }} spin />\n);\n\nclass NormalLoginForm extends React.Component {\n  handleSubmit = (e) => {\n    console.log(\"1\");\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.props.onAuth(values.userName, values.password);\n      }\n    });\n  };\n\n  render() {\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n    return (\n      <div style={{ width: \"50%\", margin: \"auto\" }}>\n        {errorMessage}\n        {this.props.loading ? (\n          <Spin indicator={antIcon} />\n        ) : (\n          <Form\n            onSubmit={this.handleSubmit}\n            name=\"basic\"\n            initialValues={{\n              remember: true,\n            }}\n          >\n            <Form.Item\n              label=\"Username\"\n              name=\"username\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your username!\",\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              label=\"Password\"\n              name=\"password\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your password!\",\n                },\n              ]}\n            >\n              <Input.Password />\n            </Form.Item>\n\n            <Form.Item name=\"remember\" valuePropName=\"checked\">\n              <Checkbox>Remember me</Checkbox>\n            </Form.Item>\n            <Form.Item>\n              <Button\n                onClick={this.handleSubmit}\n                type=\"submit\"\n                html=\"submit\"\n                style={{ marginRight: \"10px\" }}\n              >\n                Login\n              </Button>\n              Or\n              <NavLink style={{ marginRight: \"10px\" }} to=\"/signup\">\n                Sign Up\n              </NavLink>\n            </Form.Item>\n          </Form>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.loading,\n    error: state.error,\n  };\n};\n\nexport default connect(mapStateToProps)(NormalLoginForm);\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport MealList from \"./containers/MealList\";\nimport Login from \"./containers/Login\";\nconst BaseRouter = () => (\n  <div>\n    <Route exact path=\"/\" component={MealList}></Route>\n    <Route exact path=\"/login\" component={Login}></Route>\n  </div>\n);\n\nexport default BaseRouter;\n","import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nconst { Header, Content } = Layout;\n\nconst CustomLayout = (props) => {\n  return (\n    <Layout>\n      <Header className=\"header\">\n        <div className=\"logo\" />\n        <Menu style={{ float: \"right\" }} theme=\"dark\" mode=\"horizontal\">\n          {props.isAuthenticated ? (\n            <Menu.Item key=\"1\">Logout</Menu.Item>\n          ) : (\n            <Menu.Item key=\"1\">\n              <Link to=\"/login\">Login</Link>\n            </Menu.Item>\n          )}\n        </Menu>\n      </Header>\n      <Layout>\n        <Layout style={{ padding: \"0 24px 24px\" }}>\n          <Content\n            className=\"site-layout-background\"\n            style={{\n              padding: 24,\n              margin: 0,\n              minHeight: 280,\n            }}\n          >\n            {props.children}\n          </Content>\n        </Layout>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default CustomLayout;\n","import * as actionTypes from \"./actionsTypes\";\nimport Axios from \"axios\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START,\n  };\n};\n\nexport const authSuccess = (token) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n  };\n};\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"expirationDate\");\n  return {\n    type: actionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return (dispatch) => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const authLogin = (username, password) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    Axios.post(\"http://127.0.0.1:8000/rest-auth/login\", {\n      username: username,\n      password: password,\n    })\n      .then((res) => {\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch((err) => {\n        dispatch(authFail(err));\n      });\n  };\n};\n\nexport const authSignup = (username, email, password1, password2) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    Axios.post(\"http://127.0.0.1:8000/rest-auth/registration\", {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2,\n    })\n      .then((res) => {\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch((err) => {\n        dispatch(authFail(err));\n      });\n  };\n};\n\nexport const authCheckState = () => {\n  return (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(\n          checkAuthTimeout(expirationDate.getTime() - new Date().getTime()) /\n            1000\n        );\n      }\n    }\n  };\n};\n","export const AUTH_START = \"AUTH_START\";\nexport const AUTH_SUCCESS = \"AUTH_SUCCES\";\nexport const AUTH_FAIL = \"AUTH_FAIL\";\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";\n","import React, { Component } from \"react\";\nimport BaseRouter from \"./routes\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport CustomLayout from \"./containers/CustomLayout\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./store/actions/auth\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onTryAutoSignup();\n  }\n  render() {\n    return (\n      <div>\n        <Router>\n          <CustomLayout {...this.props}>\n            <BaseRouter />\n          </CustomLayout>\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.token !== null,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTryAutoSignup: () => dispatch(actions.authCheckState()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const updateObject = (oldObject, updateProperties) => {\n  return {\n    ...oldObject,\n    ...updateProperties,\n  };\n};\n","import * as actionTypes from \"../actions/actionsTypes\";\nimport { updateObject } from \"../utility\";\n\nconst initialState = {\n  token: null,\n  error: null,\n  loading: false,\n};\n\nconst authStart = (state, action) => {\n  return updateObject(state, {\n    error: null,\n    loading: true,\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return updateObject(state, {\n    token: action.token,\n    error: null,\n    loading: false,\n  });\n};\n\nconst authFail = (state, action) => {\n  return updateObject(state, {\n    token: action.token,\n    error: action.error,\n    loading: false,\n  });\n};\n\nconst authLogout = (state, action) => {\n  return updateObject(state, {\n    token: null,\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return authStart(state, action);\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n    case actionTypes.AUTH_FAIL:\n      return authFail(state, action);\n    case actionTypes.AUTH_LOGOUT:\n      return authLogout(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\n\nimport reducer from \"./store/reducers/auth\";\n\nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhances(applyMiddleware(thunk)));\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}