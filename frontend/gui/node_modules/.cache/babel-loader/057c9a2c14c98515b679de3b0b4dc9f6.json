{"ast":null,"code":"import*as actionTypes from\"./actionsTypes\";import Axios from\"axios\";export var authStart=function authStart(){return{type:actionTypes.AUTH_START};};export var authSuccess=function authSuccess(token){return{type:actionTypes.AUTH_SUCCESS,token:token};};export var authFail=function authFail(error){return{type:actionTypes.AUTH_FAIL,error:error};};export var logout=function logout(){localStorage.removeItem(\"user\");localStorage.removeItem(\"expirationDate\");return{type:actionTypes.AUTH_LOGOUT};};export var checkAuthTimeout=function checkAuthTimeout(expirationTime){return function(dispatch){setTimeout(function(){dispatch(logout());},expirationTime*1000);};};export var authLogin=function authLogin(username,password){return function(dispatch){dispatch(authStart());Axios.post(\"http://127.0.0.1:8000/^rest-auth/login\",{username:username,password:password}).then(function(res){var token=res.data.key;var expirationDate=new Date(new Date().getTime()+3600*1000);localStorage.setItem(\"token\",token);localStorage.setItem(\"expirationDate\",expirationDate);dispatch(authSuccess(token));dispatch(checkAuthTimeout(3600));}).catch(function(err){dispatch(authFail(err));});};};export var authSignup=function authSignup(username,email,password1,password2){return function(dispatch){dispatch(authStart());Axios.post(\"http://127.0.0.1:8000/^rest-auth/registration\",{username:username,email:email,password1:password1,password2:password2}).then(function(res){var token=res.data.key;var expirationDate=new Date(new Date().getTime()+3600*1000);localStorage.setItem(\"token\",token);localStorage.setItem(\"expirationDate\",expirationDate);dispatch(authSuccess(token));dispatch(checkAuthTimeout(3600));}).catch(function(err){dispatch(authFail(err));});};};export var authCheckState=function authCheckState(){return function(dispatch){var token=localStorage.getItem(\"token\");if(token===undefined){dispatch(logout());}else{var expirationDate=new Date(localStorage.getItem(\"expirationDate\"));if(expirationDate<=new Date()){dispatch(logout());}else{dispatch(authSuccess(token));dispatch(checkAuthTimeout(expirationDate.getTime()-new Date().getTime())/1000);}}};};","map":{"version":3,"sources":["/home/ciurkoj/Documents/shop/frontend/gui/src/store/actions/auth.js"],"names":["actionTypes","Axios","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","username","password","post","then","res","data","key","expirationDate","Date","getTime","setItem","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionsTypes\";\nimport Axios from \"axios\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START,\n  };\n};\n\nexport const authSuccess = (token) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n  };\n};\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"expirationDate\");\n  return {\n    type: actionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return (dispatch) => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const authLogin = (username, password) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    Axios.post(\"http://127.0.0.1:8000/^rest-auth/login\", {\n      username: username,\n      password: password,\n    })\n      .then((res) => {\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch((err) => {\n        dispatch(authFail(err));\n      });\n  };\n};\n\nexport const authSignup = (username, email, password1, password2) => {\n  return (dispatch) => {\n    dispatch(authStart());\n    Axios.post(\"http://127.0.0.1:8000/^rest-auth/registration\", {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2,\n    })\n      .then((res) => {\n        const token = res.data.key;\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch((err) => {\n        dispatch(authFail(err));\n      });\n  };\n};\n\nexport const authCheckState = () => {\n  return (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(\n          checkAuthTimeout(expirationDate.getTime() - new Date().getTime()) /\n            1000\n        );\n      }\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}