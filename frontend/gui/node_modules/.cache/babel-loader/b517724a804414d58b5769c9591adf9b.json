{"ast":null,"code":"var _jsxFileName = \"/home/ciurkoj/Documents/shop/frontend/gui/src/containers/Signup.js\";\nimport React, { useState } from \"react\";\nimport { Form, Input, Tooltip, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nconst {\n  Option\n} = Select;\nconst AutoCompleteOption = AutoComplete.Option;\nconst residences = [{\n  value: \"zhejiang\",\n  label: \"Zhejiang\",\n  children: [{\n    value: \"hangzhou\",\n    label: \"Hangzhou\",\n    children: [{\n      value: \"xihu\",\n      label: \"West Lake\"\n    }]\n  }]\n}, {\n  value: \"jiangsu\",\n  label: \"Jiangsu\",\n  children: [{\n    value: \"nanjing\",\n    label: \"Nanjing\",\n    children: [{\n      value: \"zhonghuamen\",\n      label: \"Zhong Hua Men\"\n    }]\n  }]\n}];\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nconst RegistrationForm = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    console.log(\"Received values of form: \", values);\n  };\n\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n  const onWebsiteChange = value => {\n    if (!value) {\n      setAutoCompleteResult([]);\n    } else {\n      setAutoCompleteResult([\".com\", \".org\", \".net\"].map(domain => `${value}${domain}`));\n    }\n  };\n\n  const websiteOptions = autoCompleteResult.map(website => ({\n    label: website,\n    value: website\n  }));\n  return /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n    form: form,\n    name: \"register\",\n    onFinish: onFinish,\n    initialValues: {\n      residence: [\"zhejiang\", \"hangzhou\", \"xihu\"],\n      prefix: \"86\"\n    },\n    scrollToFirstError: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"email\",\n    label: \"E-mail\",\n    rules: [{\n      type: \"email\",\n      message: \"The input is not valid E-mail!\"\n    }, {\n      required: true,\n      message: \"Please input your E-mail!\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"password\",\n    label: \"Password\",\n    rules: [{\n      required: true,\n      message: \"Please input your password!\"\n    }],\n    hasFeedback: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input.Password, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"confirm\",\n    label: \"Confirm Password\",\n    dependencies: [\"password\"],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: \"Please confirm your password!\"\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue(\"password\") === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(\"The two passwords that you entered do not match!\");\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input.Password, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"nickname\",\n    label: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, \"Nickname\\xA0\", /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"What do you want others to call you?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(QuestionCircleOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }))),\n    rules: [{\n      required: true,\n      message: \"Please input your nickname!\",\n      whitespace: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Captcha\",\n    extra: \"We must make sure that your are a human.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"captcha\",\n    noStyle: true,\n    rules: [{\n      required: true,\n      message: \"Please input the captcha you got!\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, \"Get captcha\")))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({\n    name: \"agreement\",\n    valuePropName: \"checked\",\n    rules: [{\n      validator: (_, value) => value ? Promise.resolve() : Promise.reject(\"Should accept agreement\")\n    }]\n  }, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, \"I have read the \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 27\n    }\n  }, \"agreement\"))), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }, \"Register\")));\n};\n\nexport default RegistrationForm;","map":{"version":3,"sources":["/home/ciurkoj/Documents/shop/frontend/gui/src/containers/Signup.js"],"names":["React","useState","Form","Input","Tooltip","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","QuestionCircleOutlined","Option","AutoCompleteOption","residences","value","label","children","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegistrationForm","form","useForm","onFinish","values","console","log","autoCompleteResult","setAutoCompleteResult","onWebsiteChange","map","domain","websiteOptions","website","residence","prefix","type","message","required","getFieldValue","validator","rule","Promise","resolve","reject","whitespace","_"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete,\n} from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\nconst residences = [\n  {\n    value: \"zhejiang\",\n    label: \"Zhejiang\",\n    children: [\n      {\n        value: \"hangzhou\",\n        label: \"Hangzhou\",\n        children: [\n          {\n            value: \"xihu\",\n            label: \"West Lake\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: \"jiangsu\",\n    label: \"Jiangsu\",\n    children: [\n      {\n        value: \"nanjing\",\n        label: \"Nanjing\",\n        children: [\n          {\n            value: \"zhonghuamen\",\n            label: \"Zhong Hua Men\",\n          },\n        ],\n      },\n    ],\n  },\n];\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 8,\n    },\n  },\n  wrapperCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 16,\n    },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nconst RegistrationForm = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    console.log(\"Received values of form: \", values);\n  };\n\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n  const onWebsiteChange = (value) => {\n    if (!value) {\n      setAutoCompleteResult([]);\n    } else {\n      setAutoCompleteResult(\n        [\".com\", \".org\", \".net\"].map((domain) => `${value}${domain}`)\n      );\n    }\n  };\n\n  const websiteOptions = autoCompleteResult.map((website) => ({\n    label: website,\n    value: website,\n  }));\n  return (\n    <Form\n      {...formItemLayout}\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      initialValues={{\n        residence: [\"zhejiang\", \"hangzhou\", \"xihu\"],\n        prefix: \"86\",\n      }}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: \"email\",\n            message: \"The input is not valid E-mail!\",\n          },\n          {\n            required: true,\n            message: \"Please input your E-mail!\",\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your password!\",\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={[\"password\"]}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: \"Please confirm your password!\",\n          },\n          ({ getFieldValue }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue(\"password\") === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(\n                \"The two passwords that you entered do not match!\"\n              );\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"nickname\"\n        label={\n          <span>\n            Nickname&nbsp;\n            <Tooltip title=\"What do you want others to call you?\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        }\n        rules={[\n          {\n            required: true,\n            message: \"Please input your nickname!\",\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Captcha\"\n        extra=\"We must make sure that your are a human.\"\n      >\n        <Row gutter={8}>\n          <Col span={12}>\n            <Form.Item\n              name=\"captcha\"\n              noStyle\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input the captcha you got!\",\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Button>Get captcha</Button>\n          </Col>\n        </Row>\n      </Form.Item>\n\n      <Form.Item\n        name=\"agreement\"\n        valuePropName=\"checked\"\n        rules={[\n          {\n            validator: (_, value) =>\n              value\n                ? Promise.resolve()\n                : Promise.reject(\"Should accept agreement\"),\n          },\n        ]}\n        {...tailFormItemLayout}\n      >\n        <Checkbox>\n          I have read the <a href=\"\">agreement</a>\n        </Checkbox>\n      </Form.Item>\n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Register\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default RegistrationForm;\n"]},"metadata":{},"sourceType":"module"}