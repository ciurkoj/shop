{"ast":null,"code":"import _slicedToArray from\"/home/ciurkoj/Documents/shop/frontend/gui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{Form,Input,Tooltip,Checkbox,Button}from\"antd\";import{QuestionCircleOutlined}from\"@ant-design/icons\";var formItemLayout={labelCol:{xs:{span:24},sm:{span:8}},wrapperCol:{xs:{span:24},sm:{span:16}}};var tailFormItemLayout={wrapperCol:{xs:{span:24,offset:0},sm:{span:16,offset:8}}};var RegistrationForm=function RegistrationForm(){var _Form$useForm=Form.useForm(),_Form$useForm2=_slicedToArray(_Form$useForm,1),form=_Form$useForm2[0];var onFinish=function onFinish(values){console.log(\"Received values of form: \",values);};return/*#__PURE__*/React.createElement(Form,Object.assign({},formItemLayout,{form:form,name:\"register\",onFinish:onFinish,initialValues:{residence:[\"zhejiang\",\"hangzhou\",\"xihu\"],prefix:\"86\"},scrollToFirstError:true}),/*#__PURE__*/React.createElement(Form.Item,{name:\"email\",label:\"E-mail\",rules:[{type:\"email\",message:\"The input is not valid E-mail!\"},{required:true,message:\"Please input your E-mail!\"}]},/*#__PURE__*/React.createElement(Input,null)),/*#__PURE__*/React.createElement(Form.Item,{name:\"password\",label:\"Password\",rules:[{required:true,message:\"Please input your password!\"}],hasFeedback:true},/*#__PURE__*/React.createElement(Input.Password,null)),/*#__PURE__*/React.createElement(Form.Item,{name:\"confirm\",label:\"Confirm Password\",dependencies:[\"password\"],hasFeedback:true,rules:[{required:true,message:\"Please confirm your password!\"},function(_ref){var getFieldValue=_ref.getFieldValue;return{validator:function validator(rule,value){if(!value||getFieldValue(\"password\")===value){return Promise.resolve();}return Promise.reject(\"The two passwords that you entered do not match!\");}};}]},/*#__PURE__*/React.createElement(Input.Password,null)),/*#__PURE__*/React.createElement(Form.Item,{name:\"nickname\",label:/*#__PURE__*/React.createElement(\"span\",null,\"Nickname\\xA0\",/*#__PURE__*/React.createElement(Tooltip,{title:\"What do you want others to call you?\"},/*#__PURE__*/React.createElement(QuestionCircleOutlined,null))),rules:[{required:true,message:\"Please input your nickname!\",whitespace:true}]},/*#__PURE__*/React.createElement(Input,null)),/*#__PURE__*/React.createElement(Form.Item,Object.assign({name:\"agreement\",valuePropName:\"checked\",rules:[{validator:function validator(_,value){return value?Promise.resolve():Promise.reject(\"Should accept agreement\");}}]},tailFormItemLayout),/*#__PURE__*/React.createElement(Checkbox,null,\"I have read the agreement\")),/*#__PURE__*/React.createElement(Form.Item,tailFormItemLayout,/*#__PURE__*/React.createElement(Button,{type:\"primary\",htmlType:\"submit\"},\"Register\")));};export default RegistrationForm;","map":{"version":3,"sources":["/home/ciurkoj/Documents/shop/frontend/gui/src/containers/Signup.js"],"names":["React","Form","Input","Tooltip","Checkbox","Button","QuestionCircleOutlined","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegistrationForm","useForm","form","onFinish","values","console","log","residence","prefix","type","message","required","getFieldValue","validator","rule","value","Promise","resolve","reject","whitespace","_"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Input, Tooltip, Checkbox, Button } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\n\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 8,\n    },\n  },\n  wrapperCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 16,\n    },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nconst RegistrationForm = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    console.log(\"Received values of form: \", values);\n  };\n\n  return (\n    <Form\n      {...formItemLayout}\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      initialValues={{\n        residence: [\"zhejiang\", \"hangzhou\", \"xihu\"],\n        prefix: \"86\",\n      }}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: \"email\",\n            message: \"The input is not valid E-mail!\",\n          },\n          {\n            required: true,\n            message: \"Please input your E-mail!\",\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your password!\",\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={[\"password\"]}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: \"Please confirm your password!\",\n          },\n          ({ getFieldValue }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue(\"password\") === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(\n                \"The two passwords that you entered do not match!\"\n              );\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"nickname\"\n        label={\n          <span>\n            Nickname&nbsp;\n            <Tooltip title=\"What do you want others to call you?\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        }\n        rules={[\n          {\n            required: true,\n            message: \"Please input your nickname!\",\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"agreement\"\n        valuePropName=\"checked\"\n        rules={[\n          {\n            validator: (_, value) =>\n              value\n                ? Promise.resolve()\n                : Promise.reject(\"Should accept agreement\"),\n          },\n        ]}\n        {...tailFormItemLayout}\n      >\n        <Checkbox>I have read the agreement</Checkbox>\n      </Form.Item>\n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Register\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default RegistrationForm;\n"]},"metadata":{},"sourceType":"module"}